#!/usr/bin/env python3
"""
API handler for wallet scanning functionality
"""

import sys
import os
import json
from pathlib import Path

# Add the project root to Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

def handler(event, context):
    """Handle API requests"""
    try:
        path = event.get('path', '')
        method = event.get('httpMethod', 'GET')
        
        # Handle CORS
        headers = {
            'Content-Type': 'application/json',
            'Access-Control-Allow-Origin': '*',
            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type'
        }
        
        # Handle preflight requests
        if method == 'OPTIONS':
            return {
                'statusCode': 200,
                'headers': headers,
                'body': ''
            }
        
        # Parse body for POST requests
        body = {}
        if method == 'POST' and event.get('body'):
            try:
                body = json.loads(event.get('body', '{}'))
            except:
                body = {}
        
        # Route requests
        if path.endswith('/scan') and method == 'POST':
            return handle_scan(body, headers)
        elif path.endswith('/status') and method == 'GET':
            return handle_status(body, headers)
        elif path.endswith('/health') and method == 'GET':
            return handle_health(headers)
        else:
            return {
                'statusCode': 404,
                'headers': headers,
                'body': json.dumps({'error': 'Endpoint not found'})
            }
            
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({
                'error': 'Internal server error',
                'message': str(e)
            })
        }

def handle_health(headers):
    """Health check endpoint"""
    return {
        'statusCode': 200,
        'headers': headers,
        'body': json.dumps({
            'status': 'healthy',
            'message': 'Sentient Wallet Security AI Agent is running'
        })
    }

def handle_scan(body, headers):
    """Handle wallet scanning requests"""
    try:
        address = body.get('address', '')
        
        if not address:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'error': 'Address is required'})
            }
        
        # For now, return a mock response
        # In production, you would integrate with the actual wallet scanning logic
        mock_result = {
            'status': 'completed',
            'result': f"""
Sentient Wallet Security AI Agent Report
========================================

Analyzed Address: {address}
Risk Score: 15/100
Risk Level: ðŸŸ¢ SAFE

ðŸš¨ SECURITY FINDINGS:
No security issues detected.

ðŸ’¡ RECOMMENDATIONS:
â€¢ Keep your private keys secure
â€¢ Use hardware wallets for large amounts
â€¢ Regularly monitor your wallet activity
â€¢ Enable two-factor authentication where possible

Report generated by Sentient Wallet Security AI Agent
Powered by @jackyjoeeth
            """.strip()
        }
        
        return {
            'statusCode': 200,
            'headers': headers,
            'body': json.dumps(mock_result)
        }
        
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': headers,
            'body': json.dumps({'error': f'Scan failed: {str(e)}'})
        }

def handle_status(body, headers):
    """Handle status check requests"""
    return {
        'statusCode': 200,
        'headers': headers,
        'body': json.dumps({
            'status': 'completed',
            'message': 'Scan completed successfully'
        })
    }
